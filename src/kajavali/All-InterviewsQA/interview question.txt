string s= "swiss"; find the first no repeating character using java 8
==================
public class FirstNonRepeatingCharacter {
    public static void main(String[] args) {
        String s = "swiss";
        Character firstNonRepeating = null;

        for (char c : s.toCharArray()) {
            if (s.indexOf(c) == s.lastIndexOf(c)) {
                firstNonRepeating = c;
                break; // Exit the loop once we find the first non-repeating character
            }
        }

        System.out.println("First non-repeating character: " + firstNonRepeating);
    }
}
=================== or  =======
  Character result =  s.chars()
       .mapToObj(i -> Character.toLowerCase(Character.valueOf((char) i)))  //// convert to lowercase & then to Character object Stream
        .collect(Collectors.groupingBy(Function.identity(), LinkedHashMap::new, Collectors.counting())) //// store in a LinkedHashMap with the count
         .entrySet().stream()                       // EntrySet stream
         .filter(entry -> entry.getValue() == 1L)   // extracts characters with a count of 1
         .map(entry -> entry.getKey())              // get the keys of EntrySet
         .findFirst().get();                      // get the first entry from the keys
          
 System.out.println(result);

